// ncov19 Configuration File

manifest {
    name = 'Queensland Health, QPHIRE Genomics'
    description = 'Public health microbiological genomics pipelines'
    author = 'son.nguyen@health.qld.gov.au'
    version = '1.0'
    nextflowVersion = '>=24.04.2'
}

// Variables
def currentDate = new Date()
def timestamp = currentDate.format("yyyyMMddHHmmss")

params {
    year                = currentDate.format("yyyy")
    month               = currentDate.format("MM")
    // Command Declared Variables
    awsProfile          = ""
    basespaceProfile    = ""
    dockerRepo          = ""

}

// Conditionals
if (params.awsProfile == "genfssphm") {
    // Access keys not needed if using IAM roles
    aws.profile                 = 'genfssphm'
    params.dockerRepo           = '606937101541.dkr.ecr.ap-southeast-2.amazonaws.com'
    params.outdir               = 's3://s3-gen-prod-data-fss/nextflow/'
    //params.credentialsS3Path  = 's3://s3-gen-prod-qphire/SARS-CoV-2/library/credentials'
    //params.referencesS3Path   = 's3://s3-gen-prod-qphire/SARS-CoV-2/library/references'
    //params.scriptsS3Path      = 's3://s3-gen-prod-qphire/SARS-CoV-2/library/scripts'
    //params.RptsSvrS3Path      = 's3://s3-gen-prod-qphire/server_data/report_server/reports'
}
if (params.awsProfile == "genfssphmdev") {
    // Access keys not needed if using IAM roles
    aws.profile                 = 'genfssphmdev'
    params.outdir               = 's3://s3-gen-dev-data-fss/nextflow/'
    params.dockerRepo           = '975226042161.dkr.ecr.ap-southeast-2.amazonaws.com'
    //params.credentialsS3Path  = 's3://s3-gen-dev-qphire/SARS-CoV-2/library/credentials'
    //params.referencesS3Path   = 's3://s3-gen-dev-qphire/SARS-CoV-2/library/references'
    //params.scriptsS3Path      = 's3://s3-gen-dev-qphire/SARS-CoV-2/library/scripts'
    //params.RptsSvrS3Path      = 's3://s3-gen-dev-qphire/server_data/report_server/reports'
}


profiles {
    local {
        process.executor = 'local'
        process.errorStrategy = "retry"
        process.maxRetries = 1
        process.publishDir.mode = "symlink"
        process.stageInMode = "symlink"
        process.stageOutMode = "copy"
        process.shell = ['/bin/bash', '-eo', 'pipefail']
        docker.enabled = true
        docker.fixOwnership = true
        docker.sudo = true
    }
    aws {
        process.executor = 'awsbatch'
        // Choose from nextflowSpot or nextflowOnDemand queue types below...
        process.queue = 'nextflowSpot'
        process.errorStrategy = "terminate"
        process.publishDir.mode = "copy"
        process.stageInMode = "copy"
        process.stageOutMode = "copy"
        process.shell = ['/bin/bash', '-eo', 'pipefail']
        docker.enabled = true
        docker.fixOwnership = true
        docker.sudo = true

        fusion.enabled = true
        exportStorageCredentials = true
        wave.enabled = true
    }
}

//specific settings from QPHIRE_PHMWGS, overwriting conf/modules
process {
    publishDir = [
        path: { "${params.outdir}/workflow=${task.process.tokenize(':')[1].toLowerCase()}/year=${params.year}/month=${params.month}/runName=${workflow.runName}/process=${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        overwrite: true,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    //withLabel: basespace_download {
    //    container = "$params.dockerRepo/ncov19:illumina_prep"
    //}

    withName: BCL2FASTQ {
        container = "$params.dockerRepo ? $params.dockerRepo/bcl2fastq:2.17.1.14 : nf-core/bcl2fastq:2.20.0.422"
        ext.arg = '--no-lane-splitting'
        publishDir = [
            path: { "${params.outdir}/raw/year=${params.year}/month=${params.month}/runName=${workflow.runName}" },
            mode: params.publish_dir_mode,
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/workflow=${task.process.tokenize(':')[1].toLowerCase()}/year=${params.year}/month=${params.month}/runName=${workflow.runName}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/workflow=${task.process.tokenize(':')[1].toLowerCase()}/year=${params.year}/month=${params.month}/runName=${workflow.runName}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/workflow=${task.process.tokenize(':')[1].toLowerCase()}/year=${params.year}/month=${params.month}/runName=${workflow.runName}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

env {
    NXF_HOME = '$HOME/.nextflow'
    NXF_WORK = 'work'
    NXF_TEMP = '/tmp'
}

aws {
    region = 'ap-southeast-2'
    client {
        maxConnections = 20
        connectionTimeout = 10000
        uploadStorageClass = 'STANDARD'
        storageEncryption = 'AES256'
    }
}

